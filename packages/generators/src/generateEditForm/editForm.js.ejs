import React from 'react';
import { memoizeWith, identity } from 'ramda';
import gql from 'graphql-tag';
import { Query, graphql } from 'react-apollo';
import { COUNTRY_CODE_OPTIONS } from '@8base/utils';
import { Form as FormLogic, Field, FieldArray } from '@8base/forms';
import {
  Dialog,
  Grid,
  Button,
  Form,
  Row,
  Column,
  Icon,
  Text,
  SelectField,
  InputField,
  CheckboxField,
  DateInputField,
  Label,
  ModalContext,
} from '@8base/boost';
import { FileInput } from '@8base/file-input';

const <%= changeCase.upper(entityName)%>_UPDATE_MUTATION = gql`
  mutation <%= changeCase.pascal(entityName)%>Update($data: <%= SchemaNameGenerator.getUpdateInputName(tableName)%>!) {
    <%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>(data: $data) {
      id
    }
  }
`;
<%- chunks.createEditComponents({
    fields: fields,
    SchemaNameGenerator: SchemaNameGenerator,
    changeCase: changeCase,
    chunks: chunks,
    tableSelectors: tableSelectors,
    table: table,
}); %>
const ehnhancer = graphql(<%= changeCase.upper(entityName)%>_UPDATE_MUTATION, {
  name: '<%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>',
  options: {
    refetchQueries: ['<%=changeCase.pascal(tableName)%>TableContent'],
    context: {
      TOAST_SUCCESS_MESSAGE: '<%= changeCase.pascal(entityName)%> successfuly updated',
    },
  },
});

const <%= changeCase.pascal(entityName)%>EditDialog = ehnhancer(
  class <%= changeCase.pascal(entityName)%>EditDialog extends React.PureComponent {
    static contextType = ModalContext;

    updateOnSubmit = memoizeWith(identity, id => async data => {
      await this.props.<%= SchemaNameGenerator.getUpdateItemFieldName(tableName)%>({ variables: { data: { ...data, id } } });

      this.context.closeModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID');
    });

    onClose = () => {
      this.context.closeModal('<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID');
    };

    renderFormContent = ({ handleSubmit, invalid, submitting, pristine }) => (
      <form onSubmit={handleSubmit}>
        <Dialog.Header title="Edit <%= changeCase.pascal(entityName)%>" onClose={this.onClose} />
        <Dialog.Body scrollable>
          <Grid.Layout gap="sm" stretch><%-
            chunks.fieldsInputsList({ 
              fields: fields,
              chunks: chunks,
              changeCase: changeCase,
              pluralize: pluralize,
              SchemaNameGenerator: SchemaNameGenerator,
            }); %>
          </Grid.Layout>
        </Dialog.Body>
        <Dialog.Footer>
          <Button color="neutral" variant="outlined" disabled={submitting} onClick={this.onClose}>
            Cancel
          </Button>
          <Button color="primary" type="submit" disabled={pristine || invalid} loading={submitting}>
            Update <%= changeCase.pascal(entityName)%>
          </Button>
        </Dialog.Footer>
      </form>
    );

    renderForm = ({ args }) => {
      return (
        <FormLogic
          type="UPDATE"
          tableSchemaName="<%= tableName%>"
          onSubmit={this.updateOnSubmit(args.initialValues.id)}
          initialValues={args.initialValues}
        >
          {this.renderFormContent}
        </FormLogic>
      );
    };

    render() {
      return (
        <Dialog id={'<%= changeCase.upper(entityName)%>_EDIT_DIALOG_ID'} size="sm">
          {this.renderForm}
        </Dialog>
      );
    }
  }
);

export { <%= changeCase.pascal(entityName)%>EditDialog };
