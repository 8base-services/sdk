// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should generate create form by the table name 1`] = `
"import React from 'react';
import gql from 'graphql-tag';
import { Query, graphql } from 'react-apollo';
import { COUNTRY_CODE_OPTIONS } from '@8base/utils';
import { Form as FormLogic, Field, FieldArray } from '@8base/forms';
import {
  Dialog,
  Grid,
  Button,
  Form,
  Row,
  Column,
  Icon,
  Text,
  SelectField,
  InputField,
  CheckboxField,
  DateInputField,
  Label,
  ModalContext,
} from '@8base/boost';
import { FileInput } from '@8base/file-input';

const PROPERTY_CREATE_MUTATION = gql\`
  mutation PropertyCreate($data: PropertyCreateInput!) {
    propertyCreate(data: $data) {
      id
    }
  }
\`;
const LISTINGS_LIST_QUERY = gql\`
  query ListingsListList {
    listingsList {
      items {
        id
        _description
      }
    }
  }
\`;

const getRelationOptions = (items = []) => items.map(item => ({ value: item.id, label: item._description }));

const FileInputField = ({ input, meta, maxFiles, label, ...rest }) => (
  <Form.Field label={label} input={input} meta={meta}>
    <FileInput onChange={input.onChange} value={input.value} maxFiles={maxFiles} public={rest.public}>
      {({ pick, value }) => (
        <Row stretch alignItems=\\"center\\">
          <Button type=\\"button\\" onClick={() => pick()} stretch color=\\"neutral\\">
            Choose Files
          </Button>
          <Text size=\\"sm\\">
            {value ? (Array.isArray(value) ? \`\${value.length} files selected\` : value.filename) : 'No files selected'}
          </Text>
        </Row>
      )}
    </FileInput>
  </Form.Field>
);

const ListFields = ({ fields, label, component, defaultValue = '', ...rest }) => (
  <React.Fragment>
    {fields.length > 0 && <Label>{label}</Label>}
    <Column gap=\\"sm\\" alignItems=\\"stretch\\">
      {fields.map((name, index) => (
        <Row gap=\\"sm\\" alignItems=\\"center\\">
          <Field {...rest} key={name} name={name} component={component} />
          <Icon color=\\"GRAY1\\" name=\\"Delete\\" cursor=\\"pointer\\" onClick={() => fields.remove(index)} />
        </Row>
      ))}
      <Text color=\\"GRAY1\\" cursor=\\"pointer\\" onClick={() => fields.push(defaultValue)}>
        Add {label}
      </Text>
    </Column>
  </React.Fragment>
);

const AddressField = ({ label, input: { name } }) => (
  <Column gap=\\"none\\" alignItems=\\"stretch\\">
    {label && <Label kind=\\"secondary\\">{label}</Label>}
    <Grid.Layout
      columns=\\"100px 1fr 1fr\\"
      autoRows=\\"auto\\"
      gap=\\"sm\\"
      areas={[
        ['country', 'country', 'country'],
        ['street1', 'street1', 'street1'],
        ['street2', 'street2', 'street2'],
        ['zip', 'city', 'state'],
      ]}
    >
      <Grid.Box area=\\"country\\">
        <Field name={\`\${name}.country\`} component={InputField} placeholder=\\"Country\\" />
      </Grid.Box>
      <Grid.Box area=\\"street1\\">
        <Field name={\`\${name}.street1\`} component={InputField} placeholder=\\"Address Line 1\\" />
      </Grid.Box>
      <Grid.Box area=\\"street2\\">
        <Field name={\`\${name}.street2\`} component={InputField} placeholder=\\"Address Line 2\\" />
      </Grid.Box>
      <Grid.Box area=\\"zip\\">
        <Field name={\`\${name}.zip\`} component={InputField} placeholder=\\"Postal/Zip\\" />
      </Grid.Box>
      <Grid.Box area=\\"city\\">
        <Field name={\`\${name}.city\`} component={InputField} placeholder=\\"City\\" />
      </Grid.Box>
      <Grid.Box area=\\"state\\">
        <Field name={\`\${name}.state\`} component={InputField} placeholder=\\"State\\" />
      </Grid.Box>
    </Grid.Layout>
  </Column>
);

const PhoneField = ({ label, input: { name } }) => (
  <Column gap=\\"none\\" alignItems=\\"stretch\\">
    {label && <Label kind=\\"secondary\\">{label}</Label>}
    <Grid.Layout columns=\\"120px 1fr\\" autoRows=\\"auto\\" gap=\\"lg\\">
      <Grid.Box>
        <Field name={\`\${name}.code\`} component={SelectField} placeholder=\\"Code\\" options={COUNTRY_CODE_OPTIONS} />
      </Grid.Box>
      <Grid.Box justifyContent=\\"flex-end\\">
        <Field name={\`\${name}.number\`} component={InputField} placeholder=\\"Number\\" />
      </Grid.Box>
    </Grid.Layout>
  </Column>
);

const enhancer = graphql(PROPERTY_CREATE_MUTATION, {
  name: 'propertyCreate',
  options: {
    refetchQueries: ['PropertiesTableContent'],
    context: {
      TOAST_SUCCESS_MESSAGE: 'Property successfuly created',
    },
  },
});

const PropertyCreateDialog = enhancer(
  class PropertyCreateDialog extends React.PureComponent {
    static contextType = ModalContext;

    onSubmit = async data => {
      await this.props.propertyCreate({ variables: { data } });

      this.context.closeModal('PROPERTY_CREATE_DIALOG_ID');
    };

    onClose = () => {
      this.context.closeModal('PROPERTY_CREATE_DIALOG_ID');
    };

    renderFormContent = ({ handleSubmit, invalid, submitting, pristine }) => (
      <form onSubmit={handleSubmit}>
        <Dialog.Header title=\\"New Property\\" onClose={this.onClose} />
        <Dialog.Body scrollable>
          <Grid.Layout gap=\\"sm\\" stretch>
            <Grid.Box>
              <Field name=\\"address\\" label=\\"Address\\" component={AddressField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"phone\\" label=\\"Phone\\" component={PhoneField} />
            </Grid.Box>
            <Grid.Box>
              <FieldArray name=\\"pictures\\">
                {({ fields }) => <ListFields fields={fields} label=\\"Pictures\\" component={FileInputField} />}
              </FieldArray>
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"bedrooms\\" label=\\"Bedrooms\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"title\\" label=\\"title\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"description\\" label=\\"Description\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"sqFootage\\" label=\\"Sq Footage\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"bathrooms\\" label=\\"Bathrooms\\" type=\\"number\\" component={InputField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"garage\\" label=\\"Garage\\" component={CheckboxField} />
            </Grid.Box>
            <Grid.Box>
              <Field name=\\"pool\\" label=\\"Pool\\" component={CheckboxField} />
            </Grid.Box>
            <Grid.Box>
              <Query query={LISTINGS_LIST_QUERY}>
                {({ data, loading }) => (
                  <Field
                    name=\\"listings\\"
                    label=\\"Listings\\"
                    multiple={true}
                    component={SelectField}
                    placeholder=\\"Select a listing\\"
                    loading={loading}
                    options={loading ? [] : getRelationOptions(data.listingsList.items)}
                    stretch
                  />
                )}
              </Query>
            </Grid.Box>
          </Grid.Layout>
        </Dialog.Body>
        <Dialog.Footer>
          <Button color=\\"neutral\\" variant=\\"outlined\\" disabled={submitting} onClick={this.onClose}>
            Cancel
          </Button>
          <Button color=\\"primary\\" type=\\"submit\\" loading={submitting}>
            Create Property
          </Button>
        </Dialog.Footer>
      </form>
    );

    render() {
      return (
        <Dialog id={'PROPERTY_CREATE_DIALOG_ID'} size=\\"sm\\">
          <FormLogic type=\\"CREATE\\" tableSchemaName=\\"Properties\\" onSubmit={this.onSubmit}>
            {this.renderFormContent}
          </FormLogic>
        </Dialog>
      );
    }
  }
);

export { PropertyCreateDialog };
"
`;
